require "fips202.jazz"
require "params.jazz"

//reminder to self
//param int SHAKE256_RATE = 136;

inline
fn gen_noises_entry(stack u8[64] rho_prime, inline int i, reg ptr u32[Li2_polydeg] buf)
	-> reg ptr u32[Li2_polydeg]
{
	// Poly
	stack u8 term;

	// For keccak
	stack u64[25] state;
	reg u64 offset;

	// temps
	reg u64 i;
	reg u8 c1 c2;
	reg u32 u32_c1;
	reg u32 v;
	reg u64 addr;

	stack u8[66] seed;

	i = 0;
	while(i < 64) {
		c1 = rho_prime[(int) i];
		seed[(int) i] = c1;
		i += 1;
	}
	
	seed[65] = i;
	seed[66] = 0;

	state = shake256_absorb66(seed);
	state = __keccakf1600_ref(state);
	offset = 0;

	term = 0;
	while(term < 256) {
		if(offset >= SHAKE256_RATE) {
			state = __keccakf1600_ref(state);
			offset = 0;
		}
		

		c1 = state[u8 (int) offset];
		c2 = c1;
		c1 >>= 2;
		c2 &= 15;

		if(c1 <= 9) {
			if(c1 <= 4) {
				v = 4;
			} else {
				v = Li2_q + 4;
			}
			u32_c1 = (32u) c1;
			v -= u32_c1;
			addr = (64u) term;
			buf[(int) addr] = v;
			term += 1;
		}

		if(c2 <= 9) {
			if(term < 256) {
				if(c1 <= 4) {
					v = 4;
				} else {
					v = Li2_q + 4;
				}
				u32_c1 = (32u) c1;
				v -= u32_c1;
				addr = (64u) term;
				buf[(int) addr] = v;
				term += 1;
			}
		}
	}

	return buf;
}


inline
fn gen_noises(stack u8[64] rho_prime)
	-> stack u32[Li2_l * Li2_polydeg], stack u32[Li2_k * Li2_polydeg]
{
	reg ptr u32[Li2_polydeg] entry;
	stack u32[Li2_l * Li2_polydeg] s1;
	stack u32[Li2_k * Li2_polydeg] s2;
	reg u32 temp;

	inline int i;

	for i = 0 to Li2_l {
		entry = s1[Li2_polydeg * i : Li2_polydeg];
		entry = gen_noises_entry(rho_prime, i, entry);
		s1[Li2_polydeg * i : Li2_polydeg] = entry;
	}

	for i = 0 to Li2_k {
		entry = s2[Li2_polydeg * (i + Li2_l) : Li2_polydeg];
		entry = gen_noises_entry(rho_prime, i, entry);
		s2[Li2_polydeg * (i + Li2_l) : Li2_polydeg] = entry;
	}

	return s1, s2;
}
