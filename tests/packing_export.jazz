require "../src/packing.jazz"

//void pack_t1_jazz(uint32_t p[N], uint8_t buf[POLYT1_PACKEDBYTES]);
export
fn pack_t1_jazz(reg u64 poly_ptr, reg u64 buf_ptr)
{
	reg u32 val;
	stack u32[Li2_polydeg] t1;
	stack u8[Li2_pack_t1len] buf;
	reg u64 i;
	reg u8 c;

	//load
	i = 0;
	while(i < Li2_polydeg) {
		val = (u32)[poly_ptr + 4 * i];
		t1[(int) i] = val;
		i += 1;
	}

	buf = polyt1_pack(t1, buf);

	//save
	i = 0;
	while(i < Li2_pack_t1len)
	{
		c = buf[(int) i];
		(u8)[buf_ptr + i] = c;
		i += 1;
	}
}

export
fn polyz_unpack_jazz(reg u64 rp, reg u64 ap) {
	stack u32[Li2_polydeg] r;
	stack u8[Li2_pack_zlen] a;
	reg u8 c;
	reg u32 v;

	inline int i;

	for i = 0 to Li2_pack_zlen {
		c = (u8) [ap + i];
		a[i] = c;
	}

	r = polyz_unpack(r, a);

	for i = 0 to Li2_polydeg {
		v = r[i];
		(u32) [rp + 4 * i] = v;
	}
}
