require "high-low-order.jazz"
//TODO uncomment once fft is fixed
//require "fft.jazz"

/*
inline
fn fft_vec(stack u32[Li2_polydeg * Li2_l] vec)
	-> stack u32[Li2_polydeg * Li2_l]
{
	inline int i;

	//TODO How do subarrays work...?
	//Let's just do some brute forcing for now, will have to fix later.

	stack u32[Li2_polydeg] entry;
	reg u16 j;

	for i = 0 to Li2_l {
		//TODO Brute force copying subarray
		//Bad idea obviously
		j = 0;
		while(j < Li2_polydeg) {
			entry[(int) j] = vec[i * Li2_polydeg + (int) j];
			j += 1;
		}

		//Actual fft...
		entry = fft(entry);

		//Copying back...
		j = 0;
		while(j < Li2_polydeg) {
			vec[i * Li2_polydeg + (int) j] = entry[(int) j];
		}
	}

	return vec;
}
*/

inline
fn power2round_vec(stack u32[Li2_k * Li2_polydeg] v)
	-> stack u32[Li2_k * Li2_polydeg], stack u32[Li2_k * Li2_polydeg]
{
	stack u32[Li2_k * Li2_polydeg] t1 t0;
	reg u64 i;
	reg u32 x y1 y2;

	i = 0;
	while(i < Li2_k * Li2_polydeg) {
		x = v[(int) i];
		y1, y2 = power2round(x);
		t1[(int) i] = y1;
		t0[(int) i] = y2;
		i += 1;
	}

	return t1, t0;
}
