require "poly.jazz"
require "high-low-order.jazz"
require "fft.jazz"

//TODO rename to reflect this is vecl
inline
fn fft_vec(stack u32[Li2_l * Li2_polydeg] vec)
	-> stack u32[Li2_l * Li2_polydeg]
{
	inline int i;
	reg ptr u32[Li2_polydeg] entry;

	for i = 0 to Li2_l {
		entry = vec[i * Li2_polydeg : Li2_polydeg];
		entry = fft(entry);
		vec[i * Li2_polydeg : Li2_polydeg] = entry;
	}

	return vec;
}

inline
fn fft_veck(stack u32[Li2_k * Li2_polydeg] vec)
	-> stack u32[Li2_k * Li2_polydeg]
{
	inline int i;
	reg ptr u32[Li2_polydeg] entry;

	for i = 0 to Li2_k {
		entry = vec[i * Li2_polydeg : Li2_polydeg];
		entry = fft(entry);
		vec[i * Li2_polydeg : Li2_polydeg] = entry;
	}

	return vec;
}

inline
fn ifft_to_mont_vec(stack u32[Li2_k * Li2_polydeg] vec)
	-> stack u32[Li2_k * Li2_polydeg]
{
	inline int i;
	reg ptr u32[Li2_polydeg] entry;

	for i = 0 to Li2_k {
		entry = vec[i * Li2_polydeg : Li2_polydeg];
		entry = ifft_to_mont(entry);
		vec[i * Li2_polydeg : Li2_polydeg] = entry;
	}

	return vec;
}

/* UNTESTED */
inline
fn ifft_to_mont_vecl(stack u32[Li2_l * Li2_polydeg] vec)
	-> stack u32[Li2_l * Li2_polydeg]
{
	inline int i;
	reg ptr u32[Li2_polydeg] entry;

	for i = 0 to Li2_l {
		entry = vec[i * Li2_polydeg : Li2_polydeg];
		entry = ifft_to_mont(entry);
		vec[i * Li2_polydeg : Li2_polydeg] = entry;
	}

	return vec;
}


inline
fn power2round_vec(stack u32[Li2_k * Li2_polydeg] v)
	-> stack u32[Li2_k * Li2_polydeg], stack u32[Li2_k * Li2_polydeg]
{
	stack u32[Li2_k * Li2_polydeg] t1 t0;
	reg u64 i;
	reg u32 x y1 y2;

	i = 0;
	while(i < Li2_k * Li2_polydeg) {
		x = v[(int) i];
		y1, y2 = power2round(x);
		t1[(int) i] = y1;
		t0[(int) i] = y2;
		i += 1;
	}

	return t1, t0;
}

inline
fn sum_vecs(stack u32[Li2_k * Li2_polydeg] v1 v2)
	-> stack u32[Li2_k * Li2_polydeg]
{
	stack u32[Li2_k * Li2_polydeg] vsum;
	inline int i;
	reg ptr u32[Li2_polydeg] v1_term v2_term vsum_term;
	
	for i = 0 to Li2_k {
		v1_term = v1[Li2_polydeg * i : Li2_polydeg];
		v2_term = v2[Li2_polydeg * i : Li2_polydeg];
		vsum_term = vsum[Li2_polydeg * i : Li2_polydeg];
		vsum_term = poly_add(v1_term, v2_term, vsum_term);
		vsum[Li2_polydeg * i : Li2_polydeg] = vsum_term;
	}
	return vsum;
}

/* UNTESTED */
inline
fn sum_vecl(stack u32[Li2_l * Li2_polydeg] v1 v2)
	-> stack u32[Li2_l * Li2_polydeg]
{
	stack u32[Li2_l * Li2_polydeg] vsum;
	inline int i;
	reg ptr u32[Li2_polydeg] v1_term v2_term vsum_term;
	
	for i = 0 to Li2_l {
		v1_term = v1[Li2_polydeg * i : Li2_polydeg];
		v2_term = v2[Li2_polydeg * i : Li2_polydeg];
		vsum_term = vsum[Li2_polydeg * i : Li2_polydeg];
		vsum_term = poly_add(v1_term, v2_term, vsum_term);
		vsum[Li2_polydeg * i : Li2_polydeg] = vsum_term;
	}
	return vsum;
}

/* UNTESTED */
inline
fn subtract_vecl(stack u32[Li2_l * Li2_polydeg] v1 v2)
	-> stack u32[Li2_l * Li2_polydeg]
{
	stack u32[Li2_l * Li2_polydeg] vdiff;
	inline int i;
	reg ptr u32[Li2_polydeg] v1_term v2_term vdiff_term;
	
	for i = 0 to Li2_l {
		v1_term = v1[Li2_polydeg * i : Li2_polydeg];
		v2_term = v2[Li2_polydeg * i : Li2_polydeg];
		vdiff_term = vdiff[Li2_polydeg * i : Li2_polydeg];
		vdiff_term = poly_subtract(v1_term, v2_term, vdiff_term);
		vdiff[Li2_polydeg * i : Li2_polydeg] = vdiff_term;
	}
	return vdiff;
}

/* UNTESTED */
inline
fn subtract_veck(stack u32[Li2_k * Li2_polydeg] v1 v2)
	-> stack u32[Li2_k * Li2_polydeg]
{
	stack u32[Li2_k * Li2_polydeg] vdiff;
	inline int i;
	reg ptr u32[Li2_polydeg] v1_term v2_term vdiff_term;
	
	for i = 0 to Li2_k {
		v1_term = v1[Li2_polydeg * i : Li2_polydeg];
		v2_term = v2[Li2_polydeg * i : Li2_polydeg];
		vdiff_term = vdiff[Li2_polydeg * i : Li2_polydeg];
		vdiff_term = poly_subtract(v1_term, v2_term, vdiff_term);
		vdiff[Li2_polydeg * i : Li2_polydeg] = vdiff_term;
	}
	return vdiff;
}



inline
fn dot_prod_vecs(stack u32[Li2_l * Li2_polydeg] v1 v2, reg ptr u32[Li2_polydeg] dotprod)
	-> reg ptr u32[Li2_polydeg]
{	
	stack u32[Li2_polydeg] term_prod;

	reg ptr u32[Li2_polydeg] v1_term v2_term;

	inline int i;
	
	dotprod = zero_poly(dotprod);
	for i = 0 to Li2_l {
		v1_term = v1[Li2_polydeg * i : Li2_polydeg];
		v2_term = v2[Li2_polydeg * i : Li2_polydeg];
		term_prod = poly_mult(v1_term, v2_term, term_prod);
		dotprod = poly_accumulate(term_prod, dotprod);
	}

	return dotprod;
}

inline
fn mult_mat_vec(reg ptr u32[Li2_k * Li2_l * Li2_polydeg] mat,
	reg ptr u32[Li2_l * Li2_polydeg] vec)
	-> stack u32[Li2_k * Li2_polydeg]
{
	stack u32[Li2_k * Li2_polydeg] out;
	reg ptr u32[Li2_polydeg] prod;
	inline int i;

	for i = 0 to Li2_k {
		prod = out[Li2_polydeg * i : Li2_polydeg];
		prod = dot_prod_vecs(
			mat[Li2_l * Li2_polydeg * i : Li2_l * Li2_polydeg], 
			vec, prod);
		out[Li2_polydeg * i : Li2_polydeg] = prod;
	}

	return out;
}

inline
fn expandMask(reg ptr u8[64] rho_prime, reg u16 nonce)
	-> stack u32[Li2_l * Li2_polydeg]
{
	stack u32[Li2_l * Li2_polydeg] y;
	inline int i;
	stack u16 kappa;
	reg u16 v;
	reg ptr u32[Li2_polydeg] component;
	for i = 0 to Li2_l {
		v = nonce;
		v *= Li2_l;
		v += i;
		kappa = v;
		component = y[Li2_polydeg * i : Li2_polydeg];
		component = expandMaskComponent(component, rho_prime, kappa);
		y[Li2_polydeg * i : Li2_polydeg] = component;
	}
	return y;
}

/* untested */
inline
fn pointwise_mont_mult(reg ptr u32[Li2_l * Li2_polydeg] f g fg)
	-> reg ptr u32[Li2_l * Li2_polydeg]
{
	reg u64 i;
	reg u32 v;
	stack u32 fv gv fgv;
	i = 0;
	while(i < Li2_l * Li2_polydeg) {
		v = f[(int) i];
		fv = v;
		v = g[(int) i];
		gv = v;
		fgv = montgomery_mult(fv, gv);
		v = fgv;
		fg[(int) i] = v;
		i += 1;
	}
	return fg;
}

// why am I doing this again?
/* untested */
inline
fn deep_copy_vecl(reg ptr u32[Li2_l * Li2_polydeg] vec)
	-> stack u32[Li2_l * Li2_polydeg]
{
	stack u32[Li2_l * Li2_polydeg] dest;
	reg u64 i;
	reg u32 entry;

	i = 0;
	while(i < Li2_l * Li2_polydeg) {
		entry = vec[(int) i];
		dest[(int) i] = entry;
		i += 1;
	}
	return dest;
}

/* untested */
inline
fn decompose_vec(reg ptr u32[Li2_k * Li2_polydeg] vec)
	-> stack u32[Li2_k * Li2_polydeg], stack u32[Li2_k * Li2_polydeg]
{
	stack u32[Li2_k * Li2_polydeg] vec0 vec1;
	stack u64 i;
	reg u64 addr;
	reg u32 a a0 a1;


	i = 0;
	while(i < Li2_k * Li2_polydeg) {
		addr = i;
		a = vec[(int) addr];

		a0, a1 = decompose(a);

		addr = i;
		vec0[(int) addr] = a0;
		vec1[(int) addr] = a1;

		i += 1;
	}

	return vec0, vec1;
}

/* UNTESTED */
inline
fn checknorm_veck(reg ptr u32[Li2_k * Li2_polydeg] vec, inline int threshold)
	-> stack u8
{
	stack u8 result;

	reg u64 i;
	reg u32 val;

	result = 0;

	i = 0;
	while(i < Li2_k * Li2_polydeg) {
		val = vec[(int) i];
		if(val >=s threshold) {
			result |= 1;
		}
		if(val <=s -threshold) {
			result |= 1;
		}
		i += 1;
	}
	
	return result;
}

/* UNTESTED */
inline
fn checknorm_vecl(reg ptr u32[Li2_l * Li2_polydeg] vec, inline int threshold)
	-> stack u8
{
	stack u8 result;

	reg u64 i;
	reg u32 val;

	result = 0;

	i = 0;
	while(i < Li2_l * Li2_polydeg) {
		val = vec[(int) i];
		if(val >=s threshold) {
			result |= 1;
		}
		if(val <=s -threshold) {
			result |= 1;
		}
		i += 1;
	}
	
	return result;
}

/* UNTESTED */
inline
fn mult_scalar_vec(reg ptr u32[Li2_polydeg] f,
		reg ptr u32[Li2_l * Li2_polydeg] vec)
	-> stack u32[Li2_l * Li2_polydeg]
{
	stack u32[Li2_l * Li2_polydeg] fvec;

	inline int ii;
	reg ptr u32[Li2_polydeg] fg g;

	for ii = 0 to Li2_l {
		fg = fvec[ii * Li2_polydeg : Li2_polydeg];
		g = vec[ii * Li2_polydeg : Li2_polydeg];
		fg = poly_mult(f, g, fg);
		fvec[ii * Li2_polydeg : Li2_polydeg] = fg;
	}

	return fvec;
}

/* UNTESTED */
inline
fn mult_scalar_veck(reg ptr u32[Li2_polydeg] f,
		reg ptr u32[Li2_k * Li2_polydeg] vec)
	-> stack u32[Li2_k * Li2_polydeg]
{
	stack u32[Li2_k * Li2_polydeg] fvec;

	inline int ii;
	reg ptr u32[Li2_polydeg] fg g;

	for ii = 0 to Li2_k {
		fg = fvec[ii * Li2_polydeg : Li2_polydeg];
		g = vec[ii * Li2_polydeg : Li2_polydeg];
		fg = poly_mult(f, g, fg);
		fvec[ii * Li2_polydeg : Li2_polydeg] = fg;
	}

	return fvec;
}

inline
fn polyveck_make_hint(reg ptr u32[Li2_k * Li2_polydeg] v0 v1)
	-> stack u32, stack u32[Li2_k * Li2_polydeg]
{
	stack u32 total_weight weight_comp;
	reg u32 reg_weight_comp;
	stack u32[Li2_k * Li2_polydeg] hints;

	inline int i;
	reg ptr u32[Li2_polydeg] hints_comp v0_comp v1_comp;

	total_weight = 0;
	for i = 0 to Li2_k {
		v0_comp = v0[i * Li2_polydeg : Li2_polydeg];
		v1_comp = v1[i * Li2_polydeg : Li2_polydeg];
		hints_comp = hints[i * Li2_polydeg : Li2_polydeg];

		weight_comp, hints_comp = poly_make_hint(v0_comp, v1_comp, hints_comp);

		reg_weight_comp = weight_comp;
		total_weight += reg_weight_comp;
		hints[i * Li2_polydeg : Li2_polydeg] = hints_comp;
	}

	return total_weight, hints;
}

inline
fn polyvecl_caddq(reg ptr u32[Li2_l * Li2_polydeg] vec)
	-> reg ptr u32[Li2_l * Li2_polydeg]
{
	reg u64 i;
	reg u32 val;
	i = 0;
	while(i < Li2_l * Li2_polydeg) {
		val = vec[(int) i];
		val = caddq(val);
		vec[(int) i] = val;
		i += 1;
	}
	return vec;
}

inline
fn polyvec_use_hint(reg ptr u32[Li2_k * Li2_polydeg] u hints)
	-> stack u32[Li2_k * Li2_polydeg]
{
	reg ptr u32[Li2_polydeg] hints_comp u_comp;
	inline int i;
	stack u32 result_comp;
	stack u32[Li2_k * polydeg] result;

	for i = 0 to Li2_k {
		hints_comp = hints[i * Li2_polydeg : Li2_polydeg];
		u_comp = u[i * Li2_polydeg : Li2_polydeg];
		result_comp = poly_use_hint(hints_comp, u_comp);
		result[i * Li2_polydeg : Li2_polydeg] = result_comp;
	}
	return result;
}
